# real estate transaction in Ames is recorded by the City Assessor's office.
# This collection represents our population of interest. In this lab we would like
# to learn about these home sales by taking smaller samples from the full population.
# Let’s load the data.
load(url("https://stat.duke.edu/~mc301/data/ames.RData"))
area <- ames$area
hist(area, breaks = 100)
summary(area)
samp1 <- sample(area, 50)
samp1
# build an empty vector to hold sample means
num_samples <- 2000
sample_means50 <- rep(0, num_samples)
# generate 2000 samples of size 50
# calculate sample means and store them in vector sample_mean50
for (i in 1:num_samples){
temp_samp <- sample(area, 50)
sample_means50[i] <- mean(temp_samp)
}
# visualize the sampling distribution
hist(sample_means50, breaks = 20)
for (i in 1:num_samples){
temp_samp <- sample(area, 50)
sample_means50[i] <- mean(temp_samp)
}
# visualize the sampling distribution
hist(sample_means50, breaks = 20)
## Interlude: The for loop
sample_means50 <- rep(0, 2000)
# generate the first sample
temp_samp <- sample(area, 50)
sample_means50[1] <- mean(temp_samp)
# generate the second sample
temp_samp <- sample(area, 50)
sample_means50[2] <- mean(temp_samp)
# generate the third sample
temp_samp <- sample(area, 50)
sample_means50[3] <- mean(temp_samp)
###
#...
# until you generate 2000 samples
```{r message = FALSE, warning = FALSE}
---
title: "STAT 100B Lab 2"
author: "Wesley Chang"
date: "Summer 2020 Session B"
output: pdf_document
---
### Setup for Lab
```{r message = FALSE, warning = FALSE}
# set seed
require(stats)
set.seed(60)
# get data from online source
load(url("https://stat.duke.edu/~mc301/data/ames.RData"))
```
## Lab Exercises
### Exercise 1
*Describe this population distribution using the visualization and the summary statistics. (1pt) You don’t have to use all of the summary statistics in your description, you will need to decide which ones are relevant based on the shape of the distribution. Make sure to include the plot (2pts) and the summary statistics output (2pts) in your report along with your narrative.*
```{r message = FALSE, warning = FALSE}
# generate summary statistics for area
summary(area)
```
---
title: "STAT 100B Lab 2"
author: "Wesley Chang"
date: "Summer 2020 Session B"
output: pdf_document
---
### Setup for Lab
```{r message = FALSE, warning = FALSE}
# set seed
require(stats)
set.seed(60)
# get data from online source
load(url("https://stat.duke.edu/~mc301/data/ames.RData"))
```
## Lab Exercises
### Exercise 1
*Describe this population distribution using the visualization and the summary statistics. (1pt) You don’t have to use all of the summary statistics in your description, you will need to decide which ones are relevant based on the shape of the distribution. Make sure to include the plot (2pts) and the summary statistics output (2pts) in your report along with your narrative.*
```{r message = FALSE, warning = FALSE}
# generate summary statistics for area
summary(area)
```
# set seed
require(stats)
set.seed(60)
# get data from online source
load(url("https://stat.duke.edu/~mc301/data/ames.RData"))
ames
area
```{r message = FALSE, warning = FALSE}
summary(area)
# generate summary statistics for area
summary(area)
# generate histogram of area
area <- ames$area
hist(area, breaks = 100)
# generate sample of population data
samp1 <- sample(area, 50)
# generate summary statistics
summary(samp1)
# generate histogram
hist(samp1, breaks = 100)
# generate samp2
samp2 <- sample(area, 50)
# summary statistics of samp2
summary(samp2)
# build an empty vector to hold sample means
num_samples <- 2000
sample_means50 <- rep(0, num_samples)
# generate 2000 samples of size 50
# calculate sample means and store them in vector sample_mean50
for (i in 1:num_samples){
temp_samp <- sample(area, 50)
sample_means50[i] <- mean(temp_samp)
}
# visualize the sampling distribution
hist(sample_means50, breaks = 20)
# Take a sample of size 15
q1 <- sample(area, 15)
# find mean price of homes in this sample
q1mean <- mean(q1)
q1mean
# create empty vector to hold sample means
sample_means15 <- rep(0, num_samples)
# generate 2000 samples of size 15
# calculate sample means and store them in vector sample_mean15
for (i in 1:num_samples){
temp_samp15 <- sample(area, 15)
sample_means15[i] <- mean(temp_samp15)
}
# Plot sampling distribution in histogram
hist(sample_means15, breaks = 20)
# simulate the sampling distribution for xhat price
# take 2000 samples from the pop of size 15
# num_samples was defined earlier as 2000
# create empty vector to hold sample means
sample_means15 <- rep(0, num_samples)
# generate 2000 samples of size 15
# calculate sample means and store them in vector sample_mean15
for (i in 1:num_samples){
temp_samp15 <- sample(area, 15)
sample_means15[i] <- mean(temp_samp15)
}
# Plot sampling distribution in histogram
hist(sample_means15, breaks = 20)
# code to calculate and population mean
popmean <- mean(area)
popmean
mean(sample_means15)
mean(area)
# population mean from 2000 sampling distributions
mean(sample_means15)
# distribution of 2000 sample means of sample size 150
# create empty vector
sample_means150 <- rep(0,2000)
# generate 2000 samples of size 150
for (i in 1:2000){
temp_samp150 <- sample(area, 150)
sample_means150[i] <-mean(temp_samp150)
}
# plot histogram of sample_means150
hist(sample_means150, breaks = 20)
summary(area)
area
data(InsectSprays)
?InsectSprays
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
force(InsectSprays)
drop(InsectSprays)
View(InsectSprays)
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Generate histogram of sample
hist(samp, breaks = 100)
sum(samp)
summary(samp)
Generate histogram of sample, with breaks of 100
hist(samp, breaks = 500)
?hist()
hist(samp, breaks = 100)
hist(samp, breaks = 1000)
hist(samp, breaks = 10)
hist(samp, breaks = 50)
hist(samp, breaks = 40)
hist(samp, breaks = 60)
hist(samp, breaks = 100)
summary(samp)
hist(samp, breaks = 100)
# summary statistics of samp
summary(samp)
## Lab 3 R code
# set working directory
setwd("/Users/wes_chang/Library/Mobile Documents/com~apple~CloudDocs/Summer 2020/STAT 100B (Session B)/Labs/Lab 3")
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Confidence intervals
sample_mean <- mean(samp)
# we can calculate a 95% CI by adding and subtracting the cv times the se to the point estimate
# qnorm to find the lower tail percentile from the standard normal dist
se <- sd(samp)/sqrt(60)
cv <- -qnorm(0.05/2)
lower <- sample_mean - cv*se
upper <- sample_mean + cv*se
c(lower,upper)
# what does 95% confidence mean?
# find true population mean given population data
pop_mean <- mean(population)
print(pop_mean)
## create many samples to learn how sample means and CIs vary from one sample to another, using loops
# outline:
#   obtain random sample
#   calculate and store the sample's mean and std dev
#   repeat steps 1 and 2 50 times
#   use stored statistics to calculate many confidence intervals
# first, create empty vectors where we can save the means and standard deviations
# that will be calculated from each sample
# also, store desired sample size as n
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and std dev of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n) # obtain sample of size n = 60 from population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of sample_mean
samp_sd[i] <- sd(samp)     # save sample sd in ith element of samp_sd
}
# lastly, construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv*samp_sd/sqrt(n)
upper_vector <- samp_mean + cv*samp_sd/sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
## using the following function, plot all intervals
plot_ci(lower_vector,upper_vector,mean(population))
# use following code to check what proportion of the CIs capture the true mean
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Generate histogram of sample, with breaks of 100
hist(samp, breaks = 100)
# summary statistics of samp
summary(samp)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile="ames.RData")
load("ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Generate histogram of sample, with breaks of 100
hist(samp, breaks = 100)
# summary statistics of samp
summary(samp)
*For the confidence interval to be valid, the sample mean must be normally distributed and have standard error:* $$\frac{s}{\sqrt{n}}$$ *What conditions must be met for the normality assumption to be true?*
sample_mean <- mean(samp)
# calculate a 95% CI for the sample mean by adding and subtracting the crit values times the standard error to the point estimate
se <- sd(samp)/sqrt(60)
cv <- -qnorm(0.05/2)
lower <- sample_mean - cv*se
upper <- sample_mean + cv*se
c(lower,upper)
mean(population)
c(lower_vector[1], upper_vector[1])
pop_mean <- mean(population)
print(pop_mean)
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector[1], upper_vector[1])
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
# plot confidence intervals
plot_ci(lower_vector, upper_vector, mean(population))
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
## Lab 3 R code
# set working directory
setwd("/Users/wes_chang/Library/Mobile Documents/com~apple~CloudDocs/Summer 2020/STAT 100B (Session B)/Labs/Lab 3")
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Confidence intervals
sample_mean <- mean(samp)
# we can calculate a 95% CI by adding and subtracting the cv times the se to the point estimate
# qnorm to find the lower tail percentile from the standard normal dist
se <- sd(samp)/sqrt(60)
cv <- -qnorm(0.05/2)
lower <- sample_mean - cv*se
upper <- sample_mean + cv*se
c(lower,upper)
# what does 95% confidence mean?
# find true population mean given population data
pop_mean <- mean(population)
print(pop_mean)
## create many samples to learn how sample means and CIs vary from one sample to another, using loops
# outline:
#   obtain random sample
#   calculate and store the sample's mean and std dev
#   repeat steps 1 and 2 50 times
#   use stored statistics to calculate many confidence intervals
# first, create empty vectors where we can save the means and standard deviations
# that will be calculated from each sample
# also, store desired sample size as n
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and std dev of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n) # obtain sample of size n = 60 from population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of sample_mean
samp_sd[i] <- sd(samp)     # save sample sd in ith element of samp_sd
}
# lastly, construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv*samp_sd/sqrt(n)
upper_vector <- samp_mean + cv*samp_sd/sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
## using the following function, plot all intervals
plot_ci(lower_vector,upper_vector,mean(population))
# use following code to check what proportion of the CIs capture the true mean
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
plot_ci(lower_vector, upper_vector, mean(population))
# or, use following code to check what proportion of the confidence intervals capture the true mean
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
plot_ci(lower_vector,upper_vector,mean(population))
# download ames data set
download.file("http://www.openintro.org/stat/data/ames.RData", destfile="ames.RData")
load("ames.RData")
cwd()
currentwd()
getwd)_
getwd()
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Generate histogram of sample, with breaks of 100
hist(samp, breaks = 100)
# summary statistics of samp
summary(samp)
sample_mean <- mean(samp)
# calculate a 95% CI for the sample mean by adding and subtracting the crit values times the standard error to the point estimate
se <- sd(samp)/sqrt(60)
cv <- -qnorm(0.05/2)
lower <- sample_mean - cv*se
upper <- sample_mean + cv*se
c(lower,upper)
# true average size of houses in Ames
mean(population)
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
**Answer**
My confidence interval is (`lower`, `upper`), which does capture the true average size of houses in Ames, `mean(population)`.
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector,upper_vector,mean(population))
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
num_ci
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
## Lab 3 R code
# set working directory
setwd("/Users/wes_chang/Library/Mobile Documents/com~apple~CloudDocs/Summer 2020/STAT 100B (Session B)/Labs/Lab 3")
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Confidence intervals
sample_mean <- mean(samp)
# we can calculate a 95% CI by adding and subtracting the cv times the se to the point estimate
# qnorm to find the lower tail percentile from the standard normal dist
se <- sd(samp)/sqrt(60)
cv <- -qnorm(0.05/2)
lower <- sample_mean - cv*se
upper <- sample_mean + cv*se
c(lower,upper)
# what does 95% confidence mean?
# find true population mean given population data
pop_mean <- mean(population)
print(pop_mean)
## create many samples to learn how sample means and CIs vary from one sample to another, using loops
# outline:
#   obtain random sample
#   calculate and store the sample's mean and std dev
#   repeat steps 1 and 2 50 times
#   use stored statistics to calculate many confidence intervals
# first, create empty vectors where we can save the means and standard deviations
# that will be calculated from each sample
# also, store desired sample size as n
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and std dev of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n) # obtain sample of size n = 60 from population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of sample_mean
samp_sd[i] <- sd(samp)     # save sample sd in ith element of samp_sd
}
# lastly, construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv*samp_sd/sqrt(n)
upper_vector <- samp_mean + cv*samp_sd/sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
## using the following function, plot all intervals
plot_ci(lower_vector,upper_vector,mean(population))
# use following code to check what proportion of the CIs capture the true mean
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
