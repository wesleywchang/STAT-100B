read.table
plant_data = read.table(file = "C:/Users/wesle/iCloudDrive/Summer 2020 (UCR)/STAT 147 (Session A)/Labs/Lab 4/plant.dat",header = TRUE)
plant_data
attach(plant_data)
names(plant_data)
P1A
P1B
P1C
P1D
PlA
PlA
P1B
P1C
P1D
PlA
P1B
P1C
P1D
PlA
PlB
PlC
PlD
# R Question 2
# sample mean
mean_PlA = mean(PlA)
mean_PlA
# sample median
median_PlA = median(PlA)
median_PlA
# sample variance
variance_PlA = var(PlA)
variance_PlA
# sample standard deviation
sd_PlA = sd(PlA)
sd_PlA
# R Question 3
# generate default descriptive statistics for Plant B (PlB)
summary_PlB = summary(PlB)
summary_PlB
# R Question 4
# generate mean, median, variance, std dev for Plant C (PlC)
summary_PlC = summary(PlC)
variance_PlC = var(PlC)
sd_PlC = sd(PlC)
summary_PlC
variance_PlC
sd_PlC
install.packages("TeachingDemos")
# R Question 4
# Generate 98% Ci for Plant A
# Use t.test
# Format: t.test(name_of_variable,alternative = appropriate option,
# conf.level = confidence-level-in-decimal-format)
t.test(PlA,alternative="two.sided",conf.level=0.98)
t.test(PlB,alternative="two.sided",conf.level=0.96)
t.test(PlA,alternative="less",mu=1.5,conf.level=0.95)
t.test(PlB,alternative="two.sided",conf.level=0.95)
inclass5 = read.table(file = "C:/Users/wesle/iCloudDrive/Summer 2020/STAT 147 (Session A)/In Class Exercises/5/dograces.dat", header = TRUE, skip = 1)
inclass5 = read.table(file = "C:/Users/wesle/iCloudDrive/Summer 2020/STAT 147 (Session A)/In Class Exercises/5/DOGRACES.DAT", header = TRUE, skip = 1)
inclass5 = read.table(file = "C:/Users/wesle/iCloudDrive/Summer 2020 (UCR)/STAT 147 (Session A)/In Class Exercises/5/DOGRACES.DAT", header = TRUE, skip = 1)
inclass5
attach(inclass5)
names(inclass5)
Dusty
Shadow
Lakota
t.test(Shadow,alternative="two.sided",conf.level=0.97)
t.test(Lakota,alternative="greater",mu=60,conf.level=0.95)
var.test(Shadow,Lakota,ratio=1,alternative="two.sided",conf.level=0.95)
t.test(Lakota,Shadow,alternative="greater", var.equal = TRUE, conf.level=0.95)
lab6 = read.table(file = "C:/Users/wesle/iCloudDrive/Summer 2020 (UCR)/STAT 147 (Session A)/Labs/Lab 6/plant.dat", header = TRUE)
lab6
attach(lab6)
names(lab6)
PlA
PlB
PlC
PlD
install.packages("nortest")
ad.test(PlA)
# Statistics 147 Lab #6
# Summer 2020
# Wesley Chang
### R Question 2
## Part i
lab6 = read.table(file = "C:/Users/wesle/iCloudDrive/Summer 2020 (UCR)/STAT 147 (Session A)/Labs/Lab 6/plant.dat", header = TRUE)
lab6
attach(lab6)
names(lab6)
PlA
PlB
PlC
PlD
# Perform the appropriate teset to determine whether there is a significant difference
# in mean amount of effluent between the four plants
# Subpart a
# first, test for normality using the Anderson-Darling test
ad.test(PlA)
installed.packages()
library(nortest)
ad.test(PlA)
ad.test(PlA)
ad.test(PlB)
ad.test(PlC)
ad.test(PlD)
make the columns acessible
stack_plants <- stack(lab6)
attach(stack_plants)
names(stack_plants)
stack_plants <- stack(lab6)
attach(stack_plants)
names(stack_plants)
values
ind
bartlett.test(values,ind)
results2 = aov(values~ind,data=stack_plants)
summary(results2)
TukeyHSD(results2,conf.level=0.95)
# Change working directory
setwd("C:/Users/wesle/iCloudDrive/Summer 2020 (UCR)/STAT 147 (Session A)/Final")
# read in and print dogdiet.dat
dogdiet <- read.table(file = "dogdiet.dat", header = TRUE, skip=1)
C:/Users/wesle/iCloudDrive/Summer 2020/STAT 147 (Session A)/Final
# read in and print dogdiet.dat
dogdiet <- read.table(file = "dogdiet.dat", header = TRUE, skip=1)
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
arbuthnot$girls
plot(x = arbuthnot$year, y = arbuthnot$girls)
plot(x= arbuthnot$year, y = arbuthnot$girls, type = "1")
plot(x= arbuthnot$year, y = arbuthnot$girls, type = "l")
?plot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot$total <- arbuthnot$boys + arbuthnot$girls
names(arbuthnot)
arbuthnot
max(arbuthnot$total)
min(arbuthnot$total)
plot(arbuthnot$year, arbuthnot$total, type = "l")
5218 / 4683
arbuthnot$boys / arbuthnot$girls
5218 / (5218+4683)
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
arbuthnot$proportionboys <- arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$boys, type = "l")
arbuthnot$boys > arbuthnot$girls
# compute for all year simultaneously
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
# access data set arbuthnot.R from the openintro website
# data has 82 observations on 3 variables
# baptism records of children born in London for every year from 1629 to 1710
source("http://www.openintro.org/stat/data/arbuthnot.R")
# comparison operators
arbuthnot$boys > arbuthnot$girls
# STAT 100B Summer 2020
# Lab #1
# Wesley Chang
# access data set arbuthnot.R from the openintro website
# data has 82 observations on 3 variables
# baptism records of children born in London for every year from 1629 to 1710
source("http://www.openintro.org/stat/data/arbuthnot.R")
# view data
arbuthnot
# see dimensions of the data frame
# output: [1] 82 3, indicating there are 82 rows and 3 columns
dim(arbuthnot)
# get names for each column
# output: "year" "boys" "girls"
names(arbuthnot)
# access a single column of a data frame using a command like this:
arbuthnot$boys
## Exercise 1:
# what command would you use to extract just the counts of girls baptized?
arbuthnot$girls
# Notice that the way R has printed these data is different.
# When we looked at the complete data frame, we saw 82 rows, one on each line of the display.
# These data are no longer structured in a table with other variables, so they are displayed
# one right after another. Objects that print out in this way are called vectors;
# they represent a set of numbers. R has added numbers in [brackets] along the left side
# of the printout to indicate locations within the vector. For example, 5218 follows [1],
# indicating that 5218 is the first entry in the vector. And if [43] starts a line, then
# that would mean the first number on that line would represent the 43rd entry in the vector.
## functions for making graphical plots
# plot of the number of girls baptized per year
plot(x = arbuthnot$year, y = arbuthnot$girls)
# same plot as above but connected with lines
plot(x= arbuthnot$year, y = arbuthnot$girls, type = "l")
# access documentation for "plot"
?plot
## arithmetic operations
# two integerts
5218 + 4683
# two columns
arbuthnot$boys + arbuthnot$girls
# store the sum of the two columns into another column in the original dataset
arbuthnot$total <- arbuthnot$boys + arbuthnot$girls
names(arbuthnot)
arbuthnot
# finiding the maximum and minimum total count
max(arbuthnot$total)
min(arbuthnot$total)
# plot of total number of baptisms per year
plot(arbuthnot$year, arbuthnot$total, type = "l")
# ratio
5218 / 4683
# ratio of complete vectors
arbuthnot$boys / arbuthnot$girls
# proportion of newborns that are boys
5218 / (5218+4683)
# compute for all year simultaneously
arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
## Exercise 3
# make a plot of the proportion of boys over time
arbuthnot$proportionboys <- arbuthnot$boys / (arbuthnot$boys + arbuthnot$girls)
plot(x = arbuthnot$year, y = arbuthnot$boys, type = "l")
# comparison operators
arbuthnot$boys > arbuthnot$girls
plot(x = arbuthnot$year, y = arbuthnot$boys, type = "l")
arbuthnot$ratio <- arbuthnot$boys / arbuthnot$girls
arbuthnot$year[filter]
# Note: Everything after the "#" sign (in blue color) is not R code but comments
# add a colum that holds the ratio of boys to girls for each year
arbuthnot$ratio <- arbuthnot$boys / arbuthnot$girls
# prepare the TRUE/FALSE filter for ratio greater than 1.15
filter <- arbuthnot$ratio > 1.15
# apply the filter to find the years with ratio greater than 1.15
arbuthnot$year[filter] # here [ ] is used instead of ( )
arbuthnot$year[filter]
arbuthnot$boys[arbuthnot$year == 1664]
source("http://www.openintro.org/stat/data/present.R")
present
dim(present)
names(present)
present$year
attach(present)
year
max(year)
min(year)
max(year) = min(year)
q3 <- max(year) = min(year)
q3 <- max(year)-min(year)
q3
range(year)
2002 - 1940
install.packages("tidyverse")
installr
install.packages("installr")
install.packages("Rcpp")
install.packages("rtools")
evalcpp()
evalCPP()
library(Rcpp)
install.packages("backports")
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::is_tinytex()
# download ames data set
download.file("http://www.openintro.org/stat/data/ames.RData", destfile="ames.RData")
load("ames.RData")
dir()
ls()
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
# Generate histogram of sample, with breaks of 100
hist(samp, breaks = 100)
# summary statistics of samp
summary(samp)
# calculate mean of the sample
sample_mean <- mean(samp)
# calculate a 95% CI for the sample mean by adding and subtracting the crit values times the standard error to the point estimate
se <- sd(samp)/sqrt(60)
cv <- -qnorm(0.05/2)
lower <- sample_mean - cv*se
upper <- sample_mean + cv*se
c(lower,upper)
# true average size of houses in Ames
mean(population)
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean <- mean(samp)
samp_sd <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
pop_mean <- mean(population)
print(pop_mean)
# create empty vectors to save means and standard deviations
samp_mean <- rep(NA,50)
samp_sd <- rep(NA, 50)
n <- 60
# for loop to calculate means and sd of 50 random samples
num_ci <- 50
for(i in 1:num_ci){
samp <- sample(population, n)
samp_mean[i] <- mean(samp)
samp_sd[i] <- sd(samp)
}
# construct confidence intervals
cv <- -qnorm(0.05/2)
lower_vector <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector <- samp_mean + cv * samp_sd / sqrt(n)
# view first interval
c(lower_vector[1], upper_vector[1])
sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
plot_ci(lower_vector,upper_vector,mean(population))
prop_ci <- sum((lower_vector <= pop_mean) & (upper_vector >= pop_mean)) / num_ci
prop_ci
r prop_ci * 100%
r prop_ci * 100
prop_ci*100
prop_ci*100%
label_percent(prop_ci)
```{r include=FALSE}
library(scales)
label_percent(prop_ci)
percent(prop_ci)
(100*prop_ci)/2
?qnorm
?qt
?qnorm
qnorm(.98)
qnorm(.99)
-qnorm(0.02/2)
qnorm(.99)
lower_vector2 <- samp_mean - cv * samp_sd / sqrt(n)
upper_vector2 <- samp_mean + cv * samp_sd / sqrt(n)
plot_ci(lower_vector2, upper_vector2, mean(population))
sum((lower_vector2 <= pop_mean) & (upper_vector2 >= pop_mean)) / num_ci
?summary
summary(samp)
samp_sum <- summary(samp)
samp_sum
data(samp_sum)
view(samp_sum)
Biew(samp_sum)
View(samp_sum)
samp_sum[2:1]
samp_sum[1:1]
samp_sum[3:1]
names(samp_sum)
attach(samp_sum)
samp_sum$mean
samp_sum$Mean
samp_sum$mean
samp_sum$"Mean"
mean(samp)
median(samp)
data(InsectSprays)
?InsectSprays
summary(InsectSprays)
dim(InsectSprays)
hist(InsectSprays$count)
boxplot(InsectSprays$count ~ InsectSprays$spray)
hist(InsectSprays$count[InsectSprays$spray == "A"], breaks=6,
main = "Histogram of Count for Spray A", xlab="count")
shapiro.test(InsectSprays$count[InsectSprays$spray == "F"])
?InsectSprays
# number of variables
names(InsectSprays)
# number of cases
dim(InsectSprays)
# number of variables
names(InsectSprays)
# number of cases
dim(InsectSprays)
boxplot(InsectSprays$count ~ InsectSprays$spray)
boxplot(InsectSprays$count ~ InsectSprays$spray)
boxplot(InsectSprays$count ~ InsectSprays$spray)
# load InsectSprays data into workspace
data(InsectSprays)
while(InsectSprays$spray == "A"){
hist(InsectSprays$count[InsectSprays$spray], breaks=6,
main ="Histogram of Count for Sprays", xlab="count")
}
chickwts <- chickwts[which(chickwts$feed != "horsebean" & chickwts$feed != "meatmeal"),]
for(i in levels(chickwts$feed)){
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
for(i in levels(chickwts$feed)){
print("For ", i)
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
for(i in levels(chickwts$feed)){
print(paste0("For ", i))
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
for(i in levels(chickwts$feed)){
print(paste0("Normality test for ", i))
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
chickwts1 <- chickwts[which(chickwts$feed != "horsebean" & chickwts$feed != "meatmeal"),]
for(i in levels(chickwts1$feed)){
print(paste0("Normality test for ", i))
print(shapiro.test(chickwts1$weight[chickwts$feed == i]))
}
levels(chickwts1$feed)
chickwts1
chickwts$feed <- factor(chickwts$feed)
levels(chickwts$feed)
for(i in levels(chickwts$feed)){
print(paste0("Normality test for ", i))
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
for(i in levels(chickwts$feed)){
hist(chickwts$weight[chickwts$feed == i],
breaks=6, main =c("Histogram of Chicken Weights, for ", i), xlab="count")
}
for(i in levels(chickwts$feed)){
hist(chickwts$weight[chickwts$feed == i],
breaks=6, main =c("Histogram of Chicken Weights, for casein ", i), xlab="count")
}
for(i in levels(chickwts$feed)){
hist(chickwts$weight[chickwts$feed == i],
breaks=6, main =c("Histogram of Chicken Weights, for ", i), xlab="count")
}
for(i in levels(chickwts$feed)){
print(paste0("Normality test for ", i))
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
# using histograms
for(i in levels(chickwts$feed)){
hist(chickwts$weight[chickwts$feed == i],
breaks=6, main =c("Histogram of Chicken Weights, for ", i), xlab="count")
}
boxplot(InsectSprays$count ~ InsectSprays$spray)
for(i in levels(chickwts$feed)){
print(paste0("Standard Deviation of ", i))
filter <- chickwts$feed == i
sd(chickwts$weight[filter])
}
for(i in levels(chickwts$feed)){
print(paste0("Standard Deviation of ", i))
filter <- chickwts$feed == i
print(sd(chickwts$weight[filter]))
}
for(i in levels(chickwts$feed)){
print(paste0("Standard Deviation of ", i))
filter <- chickwts$feed == i
print(sd(chickwts$weight[filter])^2)
}
?var
for(i in levels(chickwts$feed)){
print(paste0("Variance of ", i))
filter <- chickwts$feed == i
print(var(chickwts$weight[filter]))
}
## checking for normality
# Two methods
# 1: using histograms
for(i in levels(chickwts$feed)){
hist(chickwts$weight[chickwts$feed == i],
breaks=6, main =c("Histogram of Chicken Weights, for ", i), xlab="count")
}
# 2: shapiro test
for(i in levels(chickwts$feed)){
print(paste0("Normality test for ", i))
print(shapiro.test(chickwts$weight[chickwts$feed == i]))
}
## checking for equality of variances
# two methods
# 1: compare boxplots
boxplot(InsectSprays$count ~ InsectSprays$spray)
# 2: compare variances
for(i in levels(chickwts$feed)){
print(paste0("Variance of ", i))
filter <- chickwts$feed == i
print(var(chickwts$weight[filter]))
}
